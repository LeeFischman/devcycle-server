2014-10-27 17:55:02,361 [DEBUG] django.db.backends: (0.004) SELECT postgis_lib_version(); args=None
2014-10-27 17:55:06,573 [DEBUG] django.db.backends: (0.003) SELECT postgis_lib_version(); args=None
2014-10-27 17:55:42,531 [DEBUG] django.db.backends: (0.004) SELECT postgis_lib_version(); args=None
2014-10-27 17:55:55,356 [DEBUG] django.db.backends: (0.003) SELECT postgis_lib_version(); args=None
2014-10-27 17:55:55,473 [DEBUG] django.db.backends: (0.001) SELECT 1 FROM pg_database WHERE datname = 'template_postgis' LIMIT 1;; args=('template_postgis',)
2014-10-27 17:55:55,492 [DEBUG] django.db.backends: (0.000) CREATE DATABASE "test_DCS" ; args=None
2014-10-30 14:01:59,435 [DEBUG] django.db.backends: (0.003) 
            SELECT c.relname
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('r', 'v', '')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid); args=()
2014-10-30 14:01:59,553 [DEBUG] django.db.backends: (0.117) CREATE TABLE "affinity_group" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(30) NOT NULL,
    "code" varchar(7) NOT NULL UNIQUE,
    "registered_at" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,562 [DEBUG] django.db.backends: (0.008) CREATE TABLE "auth_permission" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(50) NOT NULL,
    "content_type_id" integer NOT NULL,
    "codename" varchar(100) NOT NULL,
    UNIQUE ("content_type_id", "codename")
)
;; args=()
2014-10-30 14:01:59,570 [DEBUG] django.db.backends: (0.007) CREATE TABLE "auth_group_permissions" (
    "id" serial NOT NULL PRIMARY KEY,
    "group_id" integer NOT NULL,
    "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("group_id", "permission_id")
)
;; args=()
2014-10-30 14:01:59,578 [DEBUG] django.db.backends: (0.008) CREATE TABLE "auth_group" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(80) NOT NULL UNIQUE
)
;; args=()
2014-10-30 14:01:59,580 [DEBUG] django.db.backends: (0.002) ALTER TABLE "auth_group_permissions" ADD CONSTRAINT "group_id_refs_id_f4b32aac" FOREIGN KEY ("group_id") REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,588 [DEBUG] django.db.backends: (0.007) CREATE TABLE "auth_user_groups" (
    "id" serial NOT NULL PRIMARY KEY,
    "user_id" integer NOT NULL,
    "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("user_id", "group_id")
)
;; args=()
2014-10-30 14:01:59,595 [DEBUG] django.db.backends: (0.007) CREATE TABLE "auth_user_user_permissions" (
    "id" serial NOT NULL PRIMARY KEY,
    "user_id" integer NOT NULL,
    "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("user_id", "permission_id")
)
;; args=()
2014-10-30 14:01:59,602 [DEBUG] django.db.backends: (0.006) CREATE TABLE "auth_user" (
    "id" serial NOT NULL PRIMARY KEY,
    "password" varchar(128) NOT NULL,
    "last_login" timestamp with time zone NOT NULL,
    "is_superuser" boolean NOT NULL,
    "username" varchar(30) NOT NULL UNIQUE,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL,
    "email" varchar(75) NOT NULL,
    "is_staff" boolean NOT NULL,
    "is_active" boolean NOT NULL,
    "date_joined" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,603 [DEBUG] django.db.backends: (0.001) ALTER TABLE "auth_user_groups" ADD CONSTRAINT "user_id_refs_id_40c41112" FOREIGN KEY ("user_id") REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,604 [DEBUG] django.db.backends: (0.001) ALTER TABLE "auth_user_user_permissions" ADD CONSTRAINT "user_id_refs_id_4dc23c39" FOREIGN KEY ("user_id") REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,611 [DEBUG] django.db.backends: (0.007) CREATE TABLE "django_content_type" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(100) NOT NULL,
    "app_label" varchar(100) NOT NULL,
    "model" varchar(100) NOT NULL,
    UNIQUE ("app_label", "model")
)
;; args=()
2014-10-30 14:01:59,612 [DEBUG] django.db.backends: (0.001) ALTER TABLE "auth_permission" ADD CONSTRAINT "content_type_id_refs_id_d043b34a" FOREIGN KEY ("content_type_id") REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,618 [DEBUG] django.db.backends: (0.006) CREATE TABLE "django_session" (
    "session_key" varchar(40) NOT NULL PRIMARY KEY,
    "session_data" text NOT NULL,
    "expire_date" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,623 [DEBUG] django.db.backends: (0.005) CREATE TABLE "django_site" (
    "id" serial NOT NULL PRIMARY KEY,
    "domain" varchar(100) NOT NULL,
    "name" varchar(50) NOT NULL
)
;; args=()
2014-10-30 14:01:59,631 [DEBUG] django.db.backends: (0.007) CREATE TABLE "rider_rider" (
    "id" serial NOT NULL PRIMARY KEY,
    "os" varchar(125),
    "start_time" bigint,
    "push_id" varchar(512),
    "registered_at" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,639 [DEBUG] django.db.backends: (0.007) CREATE TABLE "rider_affinity_group_mapping" (
    "id" serial NOT NULL PRIMARY KEY,
    "rider_id" integer NOT NULL REFERENCES "rider_rider" ("id") DEFERRABLE INITIALLY DEFERRED,
    "affinity_group_id" integer NOT NULL REFERENCES "affinity_group" ("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("rider_id", "affinity_group_id")
)
;; args=()
2014-10-30 14:01:59,645 [DEBUG] django.db.backends: (0.005) CREATE TABLE "location_update_location" (
    "id" serial NOT NULL PRIMARY KEY,
    "speed" double precision,
    "time" bigint NOT NULL,
    "accuracy" double precision,
    "rider_id" integer NOT NULL REFERENCES "rider_rider" ("id") DEFERRABLE INITIALLY DEFERRED,
    "battery" double precision,
    "provider" varchar(50) NOT NULL,
    "bearing" double precision,
    "tour_id_id" varchar(64) NOT NULL
)
;; args=()
2014-10-30 14:01:59,739 [DEBUG] django.db.backends: (0.093) CREATE TABLE "tour_config_tourconfig" (
    "id" serial NOT NULL PRIMARY KEY,
    "tour_name" varchar(256) NOT NULL,
    "tour_logo" varchar(200) NOT NULL,
    "tour_id" varchar(64) NOT NULL UNIQUE,
    "tour_organization" varchar(256) NOT NULL,
    "dcs_url" varchar(200) NOT NULL,
    "gcm_sender_id" varchar(64) NOT NULL,
    "start_time" integer CHECK ("start_time" >= 0) NOT NULL,
    "max_tour_time" integer CHECK ("max_tour_time" >= 0) NOT NULL,
    "is_cancelled" boolean NOT NULL,
    "tour_route_id" integer,
    "server_polling_rate" integer CHECK ("server_polling_rate" >= 0) NOT NULL,
    "location_polling_rate" integer CHECK ("location_polling_rate" >= 0) NOT NULL,
    "server_polling_range" integer CHECK ("server_polling_range" >= 0) NOT NULL
)
;; args=()
2014-10-30 14:01:59,740 [DEBUG] django.db.backends: (0.001) ALTER TABLE "location_update_location" ADD CONSTRAINT "tour_id_id_refs_tour_id_58a0b722" FOREIGN KEY ("tour_id_id") REFERENCES "tour_config_tourconfig" ("tour_id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,745 [DEBUG] django.db.backends: (0.004) CREATE TABLE "tour_config_tourroute" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(64) NOT NULL
)
;; args=()
2014-10-30 14:01:59,745 [DEBUG] django.db.backends: (0.001) ALTER TABLE "tour_config_tourconfig" ADD CONSTRAINT "tour_route_id_refs_id_d0c73946" FOREIGN KEY ("tour_route_id") REFERENCES "tour_config_tourroute" ("id") DEFERRABLE INITIALLY DEFERRED;; args=()
2014-10-30 14:01:59,757 [DEBUG] django.db.backends: (0.011) CREATE TABLE "south_migrationhistory" (
    "id" serial NOT NULL PRIMARY KEY,
    "app_name" varchar(255) NOT NULL,
    "migration" varchar(255) NOT NULL,
    "applied" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,768 [DEBUG] django.db.backends: (0.011) CREATE TABLE "celery_taskmeta" (
    "id" serial NOT NULL PRIMARY KEY,
    "task_id" varchar(255) NOT NULL UNIQUE,
    "status" varchar(50) NOT NULL,
    "result" text,
    "date_done" timestamp with time zone NOT NULL,
    "traceback" text,
    "hidden" boolean NOT NULL,
    "meta" text
)
;; args=()
2014-10-30 14:01:59,780 [DEBUG] django.db.backends: (0.012) CREATE TABLE "celery_tasksetmeta" (
    "id" serial NOT NULL PRIMARY KEY,
    "taskset_id" varchar(255) NOT NULL UNIQUE,
    "result" text NOT NULL,
    "date_done" timestamp with time zone NOT NULL,
    "hidden" boolean NOT NULL
)
;; args=()
2014-10-30 14:01:59,786 [DEBUG] django.db.backends: (0.005) CREATE TABLE "djcelery_intervalschedule" (
    "id" serial NOT NULL PRIMARY KEY,
    "every" integer NOT NULL,
    "period" varchar(24) NOT NULL
)
;; args=()
2014-10-30 14:01:59,791 [DEBUG] django.db.backends: (0.005) CREATE TABLE "djcelery_crontabschedule" (
    "id" serial NOT NULL PRIMARY KEY,
    "minute" varchar(64) NOT NULL,
    "hour" varchar(64) NOT NULL,
    "day_of_week" varchar(64) NOT NULL,
    "day_of_month" varchar(64) NOT NULL,
    "month_of_year" varchar(64) NOT NULL
)
;; args=()
2014-10-30 14:01:59,796 [DEBUG] django.db.backends: (0.004) CREATE TABLE "djcelery_periodictasks" (
    "ident" smallint NOT NULL PRIMARY KEY,
    "last_update" timestamp with time zone NOT NULL
)
;; args=()
2014-10-30 14:01:59,808 [DEBUG] django.db.backends: (0.011) CREATE TABLE "djcelery_periodictask" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(200) NOT NULL UNIQUE,
    "task" varchar(200) NOT NULL,
    "interval_id" integer REFERENCES "djcelery_intervalschedule" ("id") DEFERRABLE INITIALLY DEFERRED,
    "crontab_id" integer REFERENCES "djcelery_crontabschedule" ("id") DEFERRABLE INITIALLY DEFERRED,
    "args" text NOT NULL,
    "kwargs" text NOT NULL,
    "queue" varchar(200),
    "exchange" varchar(200),
    "routing_key" varchar(200),
    "expires" timestamp with time zone,
    "enabled" boolean NOT NULL,
    "last_run_at" timestamp with time zone,
    "total_run_count" integer CHECK ("total_run_count" >= 0) NOT NULL,
    "date_changed" timestamp with time zone NOT NULL,
    "description" text NOT NULL
)
;; args=()
2014-10-30 14:01:59,816 [DEBUG] django.db.backends: (0.007) CREATE TABLE "djcelery_workerstate" (
    "id" serial NOT NULL PRIMARY KEY,
    "hostname" varchar(255) NOT NULL UNIQUE,
    "last_heartbeat" timestamp with time zone
)
;; args=()
2014-10-30 14:01:59,826 [DEBUG] django.db.backends: (0.010) CREATE TABLE "djcelery_taskstate" (
    "id" serial NOT NULL PRIMARY KEY,
    "state" varchar(64) NOT NULL,
    "task_id" varchar(36) NOT NULL UNIQUE,
    "name" varchar(200),
    "tstamp" timestamp with time zone NOT NULL,
    "args" text,
    "kwargs" text,
    "eta" timestamp with time zone,
    "expires" timestamp with time zone,
    "result" text,
    "traceback" text,
    "runtime" double precision,
    "retries" integer NOT NULL,
    "worker_id" integer REFERENCES "djcelery_workerstate" ("id") DEFERRABLE INITIALLY DEFERRED,
    "hidden" boolean NOT NULL
)
;; args=()
2014-10-30 14:01:59,834 [DEBUG] django.db.backends: (0.008) CREATE TABLE "django_admin_log" (
    "id" serial NOT NULL PRIMARY KEY,
    "action_time" timestamp with time zone NOT NULL,
    "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED,
    "content_type_id" integer REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED,
    "object_id" text,
    "object_repr" varchar(200) NOT NULL,
    "action_flag" smallint CHECK ("action_flag" >= 0) NOT NULL,
    "change_message" text NOT NULL
)
;; args=()
2014-10-30 14:01:59,845 [DEBUG] django.db.backends: (0.002) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'group'  AND "django_content_type"."app_label" = 'affinity' ); args=('group', u'affinity')
2014-10-30 14:01:59,846 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:01:59,847 [DEBUG] django.db.backends: (0.001) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('group', 'affinity', 'group') RETURNING "django_content_type"."id"; args=(u'group', u'affinity', 'group')
2014-10-30 14:01:59,850 [DEBUG] django.db.backends: (0.001) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (1) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(1,)
2014-10-30 14:01:59,851 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add group', 1, 'add_group'), ('Can change group', 1, 'change_group'), ('Can delete group', 1, 'delete_group'); args=(u'Can add group', 1, u'add_group', u'Can change group', 1, u'change_group', u'Can delete group', 1, u'delete_group')
2014-10-30 14:01:59,853 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'affinity'  ORDER BY "django_content_type"."name" ASC; args=(u'affinity',)
2014-10-30 14:01:59,854 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'permission'  AND "django_content_type"."app_label" = 'auth' ); args=('permission', u'auth')
2014-10-30 14:01:59,854 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:01:59,854 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('permission', 'auth', 'permission') RETURNING "django_content_type"."id"; args=(u'permission', u'auth', 'permission')
2014-10-30 14:01:59,856 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'group'  AND "django_content_type"."app_label" = 'auth' ); args=('group', u'auth')
2014-10-30 14:01:59,856 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:01:59,857 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('group', 'auth', 'group') RETURNING "django_content_type"."id"; args=(u'group', u'auth', 'group')
2014-10-30 14:01:59,859 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'user'  AND "django_content_type"."app_label" = 'auth' ); args=('user', u'auth')
2014-10-30 14:01:59,859 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:01:59,859 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('user', 'auth', 'user') RETURNING "django_content_type"."id"; args=(u'user', u'auth', 'user')
2014-10-30 14:01:59,862 [DEBUG] django.db.backends: (0.001) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (2, 3, 4) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(2, 3, 4)
2014-10-30 14:01:59,863 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add permission', 2, 'add_permission'), ('Can change permission', 2, 'change_permission'), ('Can delete permission', 2, 'delete_permission'), ('Can add group', 3, 'add_group'), ('Can change group', 3, 'change_group'), ('Can delete group', 3, 'delete_group'), ('Can add user', 4, 'add_user'), ('Can change user', 4, 'change_user'), ('Can delete user', 4, 'delete_user'); args=(u'Can add permission', 2, u'add_permission', u'Can change permission', 2, u'change_permission', u'Can delete permission', 2, u'delete_permission', u'Can add group', 3, u'add_group', u'Can change group', 3, u'change_group', u'Can delete group', 3, u'delete_group', u'Can add user', 4, u'add_user', u'Can change user', 4, u'change_user', u'Can delete user', 4, u'delete_user')
2014-10-30 14:02:20,231 [DEBUG] django.db.backends: (0.001) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'auth'  ORDER BY "django_content_type"."name" ASC; args=(u'auth',)
2014-10-30 14:02:20,232 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'contenttype'  AND "django_content_type"."app_label" = 'contenttypes' ); args=('contenttype', u'contenttypes')
2014-10-30 14:02:20,233 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,233 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('content type', 'contenttypes', 'contenttype') RETURNING "django_content_type"."id"; args=(u'content type', u'contenttypes', 'contenttype')
2014-10-30 14:02:20,235 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (5) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(5,)
2014-10-30 14:02:20,236 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add content type', 5, 'add_contenttype'), ('Can change content type', 5, 'change_contenttype'), ('Can delete content type', 5, 'delete_contenttype'); args=(u'Can add content type', 5, u'add_contenttype', u'Can change content type', 5, u'change_contenttype', u'Can delete content type', 5, u'delete_contenttype')
2014-10-30 14:02:20,238 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'contenttypes'  ORDER BY "django_content_type"."name" ASC; args=(u'contenttypes',)
2014-10-30 14:02:20,239 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'session'  AND "django_content_type"."app_label" = 'sessions' ); args=('session', u'sessions')
2014-10-30 14:02:20,239 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,240 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('session', 'sessions', 'session') RETURNING "django_content_type"."id"; args=(u'session', u'sessions', 'session')
2014-10-30 14:02:20,242 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (6) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(6,)
2014-10-30 14:02:20,242 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add session', 6, 'add_session'), ('Can change session', 6, 'change_session'), ('Can delete session', 6, 'delete_session'); args=(u'Can add session', 6, u'add_session', u'Can change session', 6, u'change_session', u'Can delete session', 6, u'delete_session')
2014-10-30 14:02:20,244 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'sessions'  ORDER BY "django_content_type"."name" ASC; args=(u'sessions',)
2014-10-30 14:02:20,245 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'site'  AND "django_content_type"."app_label" = 'sites' ); args=('site', u'sites')
2014-10-30 14:02:20,245 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,246 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('site', 'sites', 'site') RETURNING "django_content_type"."id"; args=(u'site', u'sites', 'site')
2014-10-30 14:02:20,248 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (7) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(7,)
2014-10-30 14:02:20,248 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add site', 7, 'add_site'), ('Can change site', 7, 'change_site'), ('Can delete site', 7, 'delete_site'); args=(u'Can add site', 7, u'add_site', u'Can change site', 7, u'change_site', u'Can delete site', 7, u'delete_site')
2014-10-30 14:02:20,250 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'sites'  ORDER BY "django_content_type"."name" ASC; args=(u'sites',)
2014-10-30 14:02:20,251 [DEBUG] django.db.backends: (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
2014-10-30 14:02:20,252 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_site" ("id", "domain", "name") VALUES (1, 'example.com', 'example.com'); args=(1, 'example.com', 'example.com')
2014-10-30 14:02:20,253 [DEBUG] django.db.backends: (0.001) SELECT setval(pg_get_serial_sequence('"django_site"','id'), coalesce(max("id"), 1), max("id") IS NOT null) FROM "django_site";; args=()
2014-10-30 14:02:20,256 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'rider'  AND "django_content_type"."app_label" = 'rider' ); args=('rider', u'rider')
2014-10-30 14:02:20,256 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,257 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('rider', 'rider', 'rider') RETURNING "django_content_type"."id"; args=(u'rider', u'rider', 'rider')
2014-10-30 14:02:20,259 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'affinity_group_mapping'  AND "django_content_type"."app_label" = 'rider' ); args=('affinity_group_mapping', u'rider')
2014-10-30 14:02:20,259 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,259 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('affinity_ group_ mapping', 'rider', 'affinity_group_mapping') RETURNING "django_content_type"."id"; args=(u'affinity_ group_ mapping', u'rider', 'affinity_group_mapping')
2014-10-30 14:02:20,261 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (8, 9) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(8, 9)
2014-10-30 14:02:20,262 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add rider', 8, 'add_rider'), ('Can change rider', 8, 'change_rider'), ('Can delete rider', 8, 'delete_rider'), ('Can add affinity_ group_ mapping', 9, 'add_affinity_group_mapping'), ('Can change affinity_ group_ mapping', 9, 'change_affinity_group_mapping'), ('Can delete affinity_ group_ mapping', 9, 'delete_affinity_group_mapping'); args=(u'Can add rider', 8, u'add_rider', u'Can change rider', 8, u'change_rider', u'Can delete rider', 8, u'delete_rider', u'Can add affinity_ group_ mapping', 9, u'add_affinity_group_mapping', u'Can change affinity_ group_ mapping', 9, u'change_affinity_group_mapping', u'Can delete affinity_ group_ mapping', 9, u'delete_affinity_group_mapping')
2014-10-30 14:02:20,264 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'rider'  ORDER BY "django_content_type"."name" ASC; args=(u'rider',)
2014-10-30 14:02:20,265 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'location'  AND "django_content_type"."app_label" = 'location_update' ); args=('location', u'location_update')
2014-10-30 14:02:20,266 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,266 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('location', 'location_update', 'location') RETURNING "django_content_type"."id"; args=(u'location', u'location_update', 'location')
2014-10-30 14:02:20,268 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (10) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(10,)
2014-10-30 14:02:20,269 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add location', 10, 'add_location'), ('Can change location', 10, 'change_location'), ('Can delete location', 10, 'delete_location'); args=(u'Can add location', 10, u'add_location', u'Can change location', 10, u'change_location', u'Can delete location', 10, u'delete_location')
2014-10-30 14:02:20,270 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'location_update'  ORDER BY "django_content_type"."name" ASC; args=(u'location_update',)
2014-10-30 14:02:20,271 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'tourconfig'  AND "django_content_type"."app_label" = 'tour_config' ); args=('tourconfig', u'tour_config')
2014-10-30 14:02:20,272 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,272 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('tour', 'tour_config', 'tourconfig') RETURNING "django_content_type"."id"; args=(u'tour', u'tour_config', 'tourconfig')
2014-10-30 14:02:20,274 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'tourroute'  AND "django_content_type"."app_label" = 'tour_config' ); args=('tourroute', u'tour_config')
2014-10-30 14:02:20,274 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,275 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('tour route', 'tour_config', 'tourroute') RETURNING "django_content_type"."id"; args=(u'tour route', u'tour_config', 'tourroute')
2014-10-30 14:02:20,277 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (11, 12) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(11, 12)
2014-10-30 14:02:20,277 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add tour', 11, 'add_tourconfig'), ('Can change tour', 11, 'change_tourconfig'), ('Can delete tour', 11, 'delete_tourconfig'), ('Can add tour route', 12, 'add_tourroute'), ('Can change tour route', 12, 'change_tourroute'), ('Can delete tour route', 12, 'delete_tourroute'); args=(u'Can add tour', 11, u'add_tourconfig', u'Can change tour', 11, u'change_tourconfig', u'Can delete tour', 11, u'delete_tourconfig', u'Can add tour route', 12, u'add_tourroute', u'Can change tour route', 12, u'change_tourroute', u'Can delete tour route', 12, u'delete_tourroute')
2014-10-30 14:02:20,279 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'tour_config'  ORDER BY "django_content_type"."name" ASC; args=(u'tour_config',)
2014-10-30 14:02:20,281 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'migrationhistory'  AND "django_content_type"."app_label" = 'south' ); args=('migrationhistory', u'south')
2014-10-30 14:02:20,281 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,282 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('migration history', 'south', 'migrationhistory') RETURNING "django_content_type"."id"; args=(u'migration history', u'south', 'migrationhistory')
2014-10-30 14:02:20,284 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (13) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(13,)
2014-10-30 14:02:20,284 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add migration history', 13, 'add_migrationhistory'), ('Can change migration history', 13, 'change_migrationhistory'), ('Can delete migration history', 13, 'delete_migrationhistory'); args=(u'Can add migration history', 13, u'add_migrationhistory', u'Can change migration history', 13, u'change_migrationhistory', u'Can delete migration history', 13, u'delete_migrationhistory')
2014-10-30 14:02:20,286 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'south'  ORDER BY "django_content_type"."name" ASC; args=(u'south',)
2014-10-30 14:02:20,287 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'taskmeta'  AND "django_content_type"."app_label" = 'djcelery' ); args=('taskmeta', u'djcelery')
2014-10-30 14:02:20,287 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,288 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('task state', 'djcelery', 'taskmeta') RETURNING "django_content_type"."id"; args=(u'task state', u'djcelery', 'taskmeta')
2014-10-30 14:02:20,290 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'tasksetmeta'  AND "django_content_type"."app_label" = 'djcelery' ); args=('tasksetmeta', u'djcelery')
2014-10-30 14:02:20,290 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,290 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('saved group result', 'djcelery', 'tasksetmeta') RETURNING "django_content_type"."id"; args=(u'saved group result', u'djcelery', 'tasksetmeta')
2014-10-30 14:02:20,292 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'intervalschedule'  AND "django_content_type"."app_label" = 'djcelery' ); args=('intervalschedule', u'djcelery')
2014-10-30 14:02:20,292 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,293 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('interval', 'djcelery', 'intervalschedule') RETURNING "django_content_type"."id"; args=(u'interval', u'djcelery', 'intervalschedule')
2014-10-30 14:02:20,294 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'crontabschedule'  AND "django_content_type"."app_label" = 'djcelery' ); args=('crontabschedule', u'djcelery')
2014-10-30 14:02:20,295 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,295 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('crontab', 'djcelery', 'crontabschedule') RETURNING "django_content_type"."id"; args=(u'crontab', u'djcelery', 'crontabschedule')
2014-10-30 14:02:20,297 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'periodictasks'  AND "django_content_type"."app_label" = 'djcelery' ); args=('periodictasks', u'djcelery')
2014-10-30 14:02:20,297 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,298 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('periodic tasks', 'djcelery', 'periodictasks') RETURNING "django_content_type"."id"; args=(u'periodic tasks', u'djcelery', 'periodictasks')
2014-10-30 14:02:20,299 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'periodictask'  AND "django_content_type"."app_label" = 'djcelery' ); args=('periodictask', u'djcelery')
2014-10-30 14:02:20,300 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,300 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('periodic task', 'djcelery', 'periodictask') RETURNING "django_content_type"."id"; args=(u'periodic task', u'djcelery', 'periodictask')
2014-10-30 14:02:20,302 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'workerstate'  AND "django_content_type"."app_label" = 'djcelery' ); args=('workerstate', u'djcelery')
2014-10-30 14:02:20,302 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,303 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('worker', 'djcelery', 'workerstate') RETURNING "django_content_type"."id"; args=(u'worker', u'djcelery', 'workerstate')
2014-10-30 14:02:20,304 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'taskstate'  AND "django_content_type"."app_label" = 'djcelery' ); args=('taskstate', u'djcelery')
2014-10-30 14:02:20,305 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,305 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('task', 'djcelery', 'taskstate') RETURNING "django_content_type"."id"; args=(u'task', u'djcelery', 'taskstate')
2014-10-30 14:02:20,307 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (14, 15, 16, 17, 18, 19, 20, 21) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(14, 15, 16, 17, 18, 19, 20, 21)
2014-10-30 14:02:20,309 [DEBUG] django.db.backends: (0.001) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add task state', 14, 'add_taskmeta'), ('Can change task state', 14, 'change_taskmeta'), ('Can delete task state', 14, 'delete_taskmeta'), ('Can add saved group result', 15, 'add_tasksetmeta'), ('Can change saved group result', 15, 'change_tasksetmeta'), ('Can delete saved group result', 15, 'delete_tasksetmeta'), ('Can add interval', 16, 'add_intervalschedule'), ('Can change interval', 16, 'change_intervalschedule'), ('Can delete interval', 16, 'delete_intervalschedule'), ('Can add crontab', 17, 'add_crontabschedule'), ('Can change crontab', 17, 'change_crontabschedule'), ('Can delete crontab', 17, 'delete_crontabschedule'), ('Can add periodic tasks', 18, 'add_periodictasks'), ('Can change periodic tasks', 18, 'change_periodictasks'), ('Can delete periodic tasks', 18, 'delete_periodictasks'), ('Can add periodic task', 19, 'add_periodictask'), ('Can change periodic task', 19, 'change_periodictask'), ('Can delete periodic task', 19, 'delete_periodictask'), ('Can add worker', 20, 'add_workerstate'), ('Can change worker', 20, 'change_workerstate'), ('Can delete worker', 20, 'delete_workerstate'), ('Can add task', 21, 'add_taskstate'), ('Can change task', 21, 'change_taskstate'), ('Can delete task', 21, 'delete_taskstate'); args=(u'Can add task state', 14, u'add_taskmeta', u'Can change task state', 14, u'change_taskmeta', u'Can delete task state', 14, u'delete_taskmeta', u'Can add saved group result', 15, u'add_tasksetmeta', u'Can change saved group result', 15, u'change_tasksetmeta', u'Can delete saved group result', 15, u'delete_tasksetmeta', u'Can add interval', 16, u'add_intervalschedule', u'Can change interval', 16, u'change_intervalschedule', u'Can delete interval', 16, u'delete_intervalschedule', u'Can add crontab', 17, u'add_crontabschedule', u'Can change crontab', 17, u'change_crontabschedule', u'Can delete crontab', 17, u'delete_crontabschedule', u'Can add periodic tasks', 18, u'add_periodictasks', u'Can change periodic tasks', 18, u'change_periodictasks', u'Can delete periodic tasks', 18, u'delete_periodictasks', u'Can add periodic task', 19, u'add_periodictask', u'Can change periodic task', 19, u'change_periodictask', u'Can delete periodic task', 19, u'delete_periodictask', u'Can add worker', 20, u'add_workerstate', u'Can change worker', 20, u'change_workerstate', u'Can delete worker', 20, u'delete_workerstate', u'Can add task', 21, u'add_taskstate', u'Can change task', 21, u'change_taskstate', u'Can delete task', 21, u'delete_taskstate')
2014-10-30 14:02:20,311 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'djcelery'  ORDER BY "django_content_type"."name" ASC; args=(u'djcelery',)
2014-10-30 14:02:20,313 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'logentry'  AND "django_content_type"."app_label" = 'admin' ); args=('logentry', u'admin')
2014-10-30 14:02:20,313 [DEBUG] django.db.backends: (0.000) SAVEPOINT s1221383424_x1; args=()
2014-10-30 14:02:20,313 [DEBUG] django.db.backends: (0.000) INSERT INTO "django_content_type" ("name", "app_label", "model") VALUES ('log entry', 'admin', 'logentry') RETURNING "django_content_type"."id"; args=(u'log entry', u'admin', 'logentry')
2014-10-30 14:02:20,315 [DEBUG] django.db.backends: (0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (22) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(22,)
2014-10-30 14:02:20,316 [DEBUG] django.db.backends: (0.000) INSERT INTO "auth_permission" ("name", "content_type_id", "codename") VALUES ('Can add log entry', 22, 'add_logentry'), ('Can change log entry', 22, 'change_logentry'), ('Can delete log entry', 22, 'delete_logentry'); args=(u'Can add log entry', 22, u'add_logentry', u'Can change log entry', 22, u'change_logentry', u'Can delete log entry', 22, u'delete_logentry')
2014-10-30 14:02:20,318 [DEBUG] django.db.backends: (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'admin'  ORDER BY "django_content_type"."name" ASC; args=(u'admin',)
2014-10-30 14:02:20,323 [DEBUG] django.db.backends: (0.003) CREATE INDEX "affinity_group_code_like" ON "affinity_group" ("code" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,326 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_permission_content_type_id" ON "auth_permission" ("content_type_id");; args=()
2014-10-30 14:02:20,330 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_group_permissions_group_id" ON "auth_group_permissions" ("group_id");; args=()
2014-10-30 14:02:20,333 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_group_permissions_permission_id" ON "auth_group_permissions" ("permission_id");; args=()
2014-10-30 14:02:20,337 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_group_name_like" ON "auth_group" ("name" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,341 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_user_groups_user_id" ON "auth_user_groups" ("user_id");; args=()
2014-10-30 14:02:20,345 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_user_groups_group_id" ON "auth_user_groups" ("group_id");; args=()
2014-10-30 14:02:20,350 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_user_user_permissions_user_id" ON "auth_user_user_permissions" ("user_id");; args=()
2014-10-30 14:02:20,353 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_user_user_permissions_permission_id" ON "auth_user_user_permissions" ("permission_id");; args=()
2014-10-30 14:02:20,357 [DEBUG] django.db.backends: (0.003) CREATE INDEX "auth_user_username_like" ON "auth_user" ("username" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,362 [DEBUG] django.db.backends: (0.003) CREATE INDEX "django_session_session_key_like" ON "django_session" ("session_key" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,365 [DEBUG] django.db.backends: (0.003) CREATE INDEX "django_session_expire_date" ON "django_session" ("expire_date");; args=()
2014-10-30 14:02:20,370 [DEBUG] django.db.backends: (0.003) CREATE INDEX "rider_affinity_group_mapping_rider_id" ON "rider_affinity_group_mapping" ("rider_id");; args=()
2014-10-30 14:02:20,374 [DEBUG] django.db.backends: (0.003) CREATE INDEX "rider_affinity_group_mapping_affinity_group_id" ON "rider_affinity_group_mapping" ("affinity_group_id");; args=()
2014-10-30 14:02:20,387 [DEBUG] django.db.backends: (0.012) SELECT AddGeometryColumn('location_update_location', 'coords', 4326, 'POINT', 2);; args=()
2014-10-30 14:02:20,388 [DEBUG] django.db.backends: (0.000) ALTER TABLE "location_update_location" ALTER "coords" SET NOT NULL;; args=()
2014-10-30 14:02:20,392 [DEBUG] django.db.backends: (0.004) CREATE INDEX "location_update_location_coords_id" ON "location_update_location" USING GIST ( "coords" GIST_GEOMETRY_OPS );; args=()
2014-10-30 14:02:20,395 [DEBUG] django.db.backends: (0.003) CREATE INDEX "location_update_location_rider_id" ON "location_update_location" ("rider_id");; args=()
2014-10-30 14:02:20,398 [DEBUG] django.db.backends: (0.003) CREATE INDEX "location_update_location_tour_id_id" ON "location_update_location" ("tour_id_id");; args=()
2014-10-30 14:02:20,400 [DEBUG] django.db.backends: (0.002) CREATE INDEX "location_update_location_tour_id_id_like" ON "location_update_location" ("tour_id_id" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,405 [DEBUG] django.db.backends: (0.003) CREATE INDEX "tour_config_tourconfig_tour_id_like" ON "tour_config_tourconfig" ("tour_id" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,407 [DEBUG] django.db.backends: (0.003) CREATE INDEX "tour_config_tourconfig_tour_route_id" ON "tour_config_tourconfig" ("tour_route_id");; args=()
2014-10-30 14:02:20,415 [DEBUG] django.db.backends: (0.006) SELECT AddGeometryColumn('tour_config_tourroute', 'route', 4326, 'MULTILINESTRING', 2);; args=()
2014-10-30 14:02:20,416 [DEBUG] django.db.backends: (0.000) ALTER TABLE "tour_config_tourroute" ALTER "route" SET NOT NULL;; args=()
2014-10-30 14:02:20,417 [DEBUG] django.db.backends: (0.001) CREATE INDEX "tour_config_tourroute_route_id" ON "tour_config_tourroute" USING GIST ( "route" GIST_GEOMETRY_OPS );; args=()
2014-10-30 14:02:20,421 [DEBUG] django.db.backends: (0.003) CREATE INDEX "celery_taskmeta_task_id_like" ON "celery_taskmeta" ("task_id" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,423 [DEBUG] django.db.backends: (0.002) CREATE INDEX "celery_taskmeta_hidden" ON "celery_taskmeta" ("hidden");; args=()
2014-10-30 14:02:20,427 [DEBUG] django.db.backends: (0.003) CREATE INDEX "celery_tasksetmeta_taskset_id_like" ON "celery_tasksetmeta" ("taskset_id" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,485 [DEBUG] django.db.backends: (0.058) CREATE INDEX "celery_tasksetmeta_hidden" ON "celery_tasksetmeta" ("hidden");; args=()
2014-10-30 14:02:20,490 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_periodictask_name_like" ON "djcelery_periodictask" ("name" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,493 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_periodictask_interval_id" ON "djcelery_periodictask" ("interval_id");; args=()
2014-10-30 14:02:20,497 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_periodictask_crontab_id" ON "djcelery_periodictask" ("crontab_id");; args=()
2014-10-30 14:02:20,501 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_workerstate_hostname_like" ON "djcelery_workerstate" ("hostname" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,505 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_workerstate_last_heartbeat" ON "djcelery_workerstate" ("last_heartbeat");; args=()
2014-10-30 14:02:20,509 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_state" ON "djcelery_taskstate" ("state");; args=()
2014-10-30 14:02:20,513 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_state_like" ON "djcelery_taskstate" ("state" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,516 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_task_id_like" ON "djcelery_taskstate" ("task_id" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,519 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_name" ON "djcelery_taskstate" ("name");; args=()
2014-10-30 14:02:20,522 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_name_like" ON "djcelery_taskstate" ("name" varchar_pattern_ops);; args=()
2014-10-30 14:02:20,525 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_tstamp" ON "djcelery_taskstate" ("tstamp");; args=()
2014-10-30 14:02:20,528 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_worker_id" ON "djcelery_taskstate" ("worker_id");; args=()
2014-10-30 14:02:20,531 [DEBUG] django.db.backends: (0.003) CREATE INDEX "djcelery_taskstate_hidden" ON "djcelery_taskstate" ("hidden");; args=()
2014-10-30 14:02:20,536 [DEBUG] django.db.backends: (0.003) CREATE INDEX "django_admin_log_user_id" ON "django_admin_log" ("user_id");; args=()
2014-10-30 14:02:20,539 [DEBUG] django.db.backends: (0.003) CREATE INDEX "django_admin_log_content_type_id" ON "django_admin_log" ("content_type_id");; args=()
2014-10-30 14:02:20,553 [DEBUG] django.db.backends: (0.000) SET CONSTRAINTS ALL IMMEDIATE; args=()
2014-10-30 14:02:20,554 [DEBUG] django.db.backends: (0.000) SET CONSTRAINTS ALL DEFERRED; args=()
2014-10-30 14:06:51,712 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE "south_migrationhistory"."applied" IS NOT NULL ORDER BY "south_migrationhistory"."applied" ASC; args=()
2014-10-30 14:06:51,717 [DEBUG] django.db.backends: (0.001) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:06:51,718 [DEBUG] django.db.backends: (0.001) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:06:51,719 [DEBUG] django.db.backends: (0.001) DROP TABLE DDL_TRANSACTION_TEST; args=()
2014-10-30 14:06:51,723 [DEBUG] south: execute "CREATE TABLE "rider_rider" ("id" serial NOT NULL PRIMARY KEY, "os" varchar(125) NULL, "start_time" bigint NULL, "push_id" varchar(512) NULL, "registered_at" timestamp with time zone NOT NULL)" with params "[]"
2014-10-30 14:06:51,725 [DEBUG] django.db.backends: (0.002) CREATE TABLE "rider_rider" ("id" serial NOT NULL PRIMARY KEY, "os" varchar(125) NULL, "start_time" bigint NULL, "push_id" varchar(512) NULL, "registered_at" timestamp with time zone NOT NULL); args=[]
2014-10-30 14:07:04,025 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE "south_migrationhistory"."applied" IS NOT NULL ORDER BY "south_migrationhistory"."applied" ASC; args=()
2014-10-30 14:07:04,028 [DEBUG] django.db.backends: (0.001) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:07:04,029 [DEBUG] django.db.backends: (0.000) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:07:04,030 [DEBUG] django.db.backends: (0.000) DROP TABLE DDL_TRANSACTION_TEST; args=()
2014-10-30 14:07:04,032 [DEBUG] south: execute "CREATE TABLE "affinity_group" ("id" serial NOT NULL PRIMARY KEY, "name" varchar(30) NOT NULL, "code" varchar(7) NOT NULL UNIQUE, "registered_at" timestamp with time zone NOT NULL)" with params "[]"
2014-10-30 14:07:04,034 [DEBUG] django.db.backends: (0.001) CREATE TABLE "affinity_group" ("id" serial NOT NULL PRIMARY KEY, "name" varchar(30) NOT NULL, "code" varchar(7) NOT NULL UNIQUE, "registered_at" timestamp with time zone NOT NULL); args=[]
2014-10-30 14:07:28,499 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE "south_migrationhistory"."applied" IS NOT NULL ORDER BY "south_migrationhistory"."applied" ASC; args=()
2014-10-30 14:07:28,519 [DEBUG] django.db.backends: (0.018) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:07:28,521 [DEBUG] django.db.backends: (0.001) CREATE TABLE DDL_TRANSACTION_TEST (X INT); args=()
2014-10-30 14:07:28,522 [DEBUG] django.db.backends: (0.001) DROP TABLE DDL_TRANSACTION_TEST; args=()
2014-10-30 14:07:28,528 [DEBUG] south: execute "CREATE TABLE "affinity_group" ("id" serial NOT NULL PRIMARY KEY, "name" varchar(30) NOT NULL, "code" varchar(7) NOT NULL UNIQUE, "registered_at" timestamp with time zone NOT NULL)" with params "[]"
2014-10-30 14:07:28,529 [DEBUG] django.db.backends: (0.001) CREATE TABLE "affinity_group" ("id" serial NOT NULL PRIMARY KEY, "name" varchar(30) NOT NULL, "code" varchar(7) NOT NULL UNIQUE, "registered_at" timestamp with time zone NOT NULL); args=[]
2014-10-30 14:07:32,720 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE "south_migrationhistory"."applied" IS NOT NULL ORDER BY "south_migrationhistory"."applied" ASC; args=()
2014-10-30 14:07:32,722 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE ("south_migrationhistory"."app_name" = 'affinity'  AND "south_migrationhistory"."migration" = '0001_initial' ); args=('affinity', '0001_initial')
2014-10-30 14:07:32,723 [DEBUG] django.db.backends: (0.000) INSERT INTO "south_migrationhistory" ("app_name", "migration", "applied") VALUES ('affinity', '0001_initial', '2014-10-30 18:07:32.722717+00:00') RETURNING "south_migrationhistory"."id"; args=('affinity', '0001_initial', u'2014-10-30 18:07:32.722717+00:00')
2014-10-30 14:07:54,504 [DEBUG] django.db.backends: (0.001) SELECT "south_migrationhistory"."id", "south_migrationhistory"."app_name", "south_migrationhistory"."migration", "south_migrationhistory"."applied" FROM "south_migrationhistory" WHERE "south_migrationhistory"."applied" IS NOT NULL ORDER BY "south_migrationhistory"."applied" ASC; args=()
2014-10-30 14:07:54,510 [DEBUG] django.db.backends: (0.000) SET CONSTRAINTS ALL IMMEDIATE; args=()
2014-10-30 14:07:54,510 [DEBUG] django.db.backends: (0.000) SET CONSTRAINTS ALL DEFERRED; args=()
